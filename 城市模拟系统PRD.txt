城市模拟系统产品需求文档 (PRD)

文档信息
- 项目名称：地价驱动的多智能体城市模拟系统
- 版本：v2.0
- 创建日期：2024年
- 文档状态：设计阶段

产品概述

产品定位
在现有城市模拟系统基础上，集成地价驱动机制，通过政府、企业、居民三类智能体的交互，模拟真实城市的演化过程。

核心价值
- 保持现有系统的稳定性和可用性
- 添加地价驱动的城市发展逻辑
- 提供丰富的可视化输出和数据分析
- 支持城市规划和政策研究

系统架构

整体架构图
城市模拟系统 v2.0
├── 核心引擎
│   ├── 地价系统 (Land Price System)
│   ├── 智能体系统 (Agent System)
│   ├── 建筑系统 (Building System)
│   └── 居民系统 (Resident System)
├── 数据管理
│   ├── 输入数据 (JSON配置文件)
│   ├── 运行时数据 (内存状态)
│   └── 输出数据 (JSON + 图片)
├── 可视化系统
│   ├── 实时渲染
│   ├── 图片输出
│   └── 动画生成
└── 统计分析
    ├── 实时统计
    ├── 历史数据
    └── 报告生成

数据模型设计

输入配置文件

1. 城市配置 (city_config.json)
{
  "city_name": "示例城市",
  "map_size": [256, 256],
  "core_point": [128, 128],
  "trunk_road": [[40, 128], [216, 128]],
  "initial_land_price": 100,
  "simulation_days": 365,
  "monthly_growth_rate": 0.05,
  "initial_population": 100
}

2. 建筑配置 (building_config.json)
{
  "building_types": {
    "public": {
      "capacity": 500,
      "cost": 1000,
      "service_radius": 50,
      "color": "#22A6B3",
      "symbol": "🏛️"
    },
    "residential": {
      "capacity": 200,
      "cost": 500,
      "revenue_per_person": 10,
      "color": "#F6C344",
      "symbol": "🏠"
    },
    "commercial": {
      "capacity": 800,
      "cost": 1000,
      "revenue_per_person": 20,
      "color": "#FD7E14",
      "symbol": "🏪"
    }
  },
  "land_price_factors": {
    "core_distance_weight": 0.5,
    "transport_weight": 0.3,
    "facility_weight": 0.2,
    "decay_rate": 0.01
  }
}

3. 智能体配置 (agent_config.json)
{
  "government_agent": {
    "decision_frequency": 30,
    "budget_limit": 10000,
    "public_facility_threshold": 0.8
  },
  "business_agent": {
    "profit_threshold": 0.6,
    "consecutive_days": 2,
    "expansion_probability": 0.3
  },
  "resident_agent": {
    "movement_speed": 4,
    "preference_weight": {
      "cost": 0.4,
      "convenience": 0.3,
      "quality": 0.3
    }
  }
}

输出数据文件

1. 城市状态输出 (city_state_output.json)
{
  "simulation_info": {
    "day": 365,
    "total_residents": 353,
    "total_buildings": 15,
    "average_land_price": 125.5
  },
  "land_prices": {
    "matrix": [[100, 105, ...], [102, 108, ...], ...],
    "min_price": 100,
    "max_price": 200,
    "price_distribution": {...}
  },
  "buildings": {
    "public": [
      {
        "id": "pub_1",
        "type": "public",
        "xy": [128, 128],
        "capacity": 500,
        "current_usage": 300,
        "land_price": 150,
        "construction_cost": 1000,
        "revenue": 0
      }
    ],
    "residential": [...],
    "commercial": [...]
  },
  "residents": [
    {
      "id": "agent_1",
      "pos": [128, 128],
      "home": "res_1",
      "workplace": "com_1",
      "income": 5000,
      "housing_cost": 2000,
      "transport_cost": 500
    }
  ],
  "statistics": {
    "population_growth": [...],
    "land_price_evolution": [...],
    "building_distribution": {...},
    "economic_indicators": {...}
  }
}

2. 可视化配置输出 (visualization_config.json)
{
  "color_scheme": {
    "background": "#FFFFFF",
    "trunk_road": "#9AA4B2",
    "core_point": "#0B5ED7",
    "heat_map": "#FF00FF",
    "buildings": {
      "public": "#22A6B3",
      "residential": "#F6C344",
      "commercial": "#FD7E14"
    },
    "residents": "#FFFFFF"
  },
  "symbols": {
    "public": "🏛️",
    "residential": "🏠",
    "commercial": "🏪",
    "core_point": "⭐",
    "trunk_road": "🛣️"
  },
  "rendering_settings": {
    "image_size": [800, 600],
    "dpi": 300,
    "frame_rate": 5,
    "heat_map_alpha": 0.6
  }
}

3. 坐标信息输出 (coordinates_output.json)
{
  "day": 365,
  "core_point": {
    "xy": [128, 128],
    "type": "government_core",
    "description": "城市核心点"
  },
  "trunk_road": {
    "points": [[40, 128], [216, 128]],
    "type": "main_road",
    "description": "主干道"
  },
  "buildings": {
    "public": [
      {
        "id": "pub_1",
        "xy": [128, 128],
        "type": "public",
        "description": "公共建筑1"
      }
    ],
    "residential": [
      {
        "id": "res_1",
        "xy": [80, 100],
        "type": "residential",
        "description": "住宅建筑1"
      }
    ],
    "commercial": [
      {
        "id": "com_1",
        "xy": [128, 128],
        "type": "commercial",
        "description": "商业建筑1"
      }
    ]
  },
  "residents": [
    {
      "id": "agent_1",
      "xy": [128, 128],
      "type": "resident",
      "description": "居民1"
    }
  ],
  "land_price_zones": [
    {
      "zone_id": "high_value",
      "boundary": [[120, 120], [136, 136]],
      "average_price": 180,
      "description": "高价值区域"
    }
  ]
}

功能模块设计

1. 地价系统模块
- 功能：计算和更新城市地价分布
- 输入：城市状态、建筑分布、居民分布
- 输出：地价矩阵、地价统计
- 算法：基于距离衰减的地价计算模型

2. 智能体决策模块
- 政府智能体：公共建筑建设决策
- 企业智能体：住宅/商业建筑建设决策
- 居民智能体：居住、工作、消费选择

3. 建筑管理模块
- 功能：建筑创建、更新、拆除
- 类型：公共、住宅、商业
- 属性：位置、容量、成本、收益

4. 可视化模块
- 功能：城市地图渲染、图片输出
- 输出：PNG图片、动画GIF
- 配置：颜色方案、符号、渲染设置

5. 统计分析模块
- 功能：数据收集、统计计算、报告生成
- 指标：人口、地价、建筑、经济指标
- 输出：JSON报告、图表数据

输出文件规范

文件命名规则
输出目录/
├── city_state_output.json          # 城市状态数据
├── visualization_config.json       # 可视化配置
├── coordinates_output.json         # 坐标信息
├── daily_stats.json               # 每日统计
├── land_price_evolution.json      # 地价演化
├── building_distribution.json     # 建筑分布
├── images/                        # 图片输出
│   ├── day_000.png
│   ├── day_005.png
│   └── ...
└── animations/                    # 动画输出
    ├── city_evolution.gif
    └── land_price_animation.gif

数据格式标准
- JSON格式：UTF-8编码，2空格缩进
- 坐标系统：256x256网格，原点左上角
- 颜色格式：十六进制RGB (#RRGGBB)
- 时间格式：天数（0-365）

验收标准

功能验收
- [ ] 地价系统正确计算和更新
- [ ] 智能体决策逻辑正确执行
- [ ] 建筑系统正常创建和管理
- [ ] 可视化输出符合预期
- [ ] 数据输出格式正确

性能验收
- [ ] 365天模拟运行时间 < 5分钟
- [ ] 内存使用 < 2GB
- [ ] 图片输出质量符合要求
- [ ] JSON文件大小合理

质量验收
- [ ] 代码结构清晰，模块化设计
- [ ] 配置文件格式规范
- [ ] 输出数据完整准确
- [ ] 文档齐全

开发计划

阶段1：基础框架 (1周)
- 设计数据结构和接口
- 创建配置文件模板
- 搭建基础框架

阶段2：核心功能 (2周)
- 实现地价系统
- 实现智能体决策逻辑
- 实现建筑管理系统

阶段3：输出系统 (1周)
- 实现JSON输出功能
- 实现坐标信息输出
- 实现可视化配置输出

阶段4：测试优化 (1周)
- 功能测试和调试
- 性能优化
- 文档完善

技术实现要点

关键技术
- Python 3.8+
- NumPy (数值计算)
- Matplotlib (可视化)
- JSON (数据交换)
- Pathlib (文件管理)

设计原则
- 模块化设计
- 配置驱动
- 数据分离
- 向后兼容
- 可扩展性
