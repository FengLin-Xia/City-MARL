增强城市模拟系统 PRD v3.2
1. 项目概述
1.1 项目名称

增强城市模拟系统 (Enhanced City Simulation System)

1.2 项目目标

构建一个基于多智能体的城市发展模拟系统，通过 高斯核地价潜力场、智能体决策、真实通勤轨迹和多时间尺度更新，模拟城市的动态演化，特别突出 逐层涟漪式生长感：建筑必须先填满最内层等值线后才能外扩。

1.3 核心特性

多智能体决策系统（政府、企业、居民）

高斯核驱动的地价演化与建筑分布

真实通勤轨迹和热力图

时间分层：慢（地价场）、中（人口）、快（建筑）

逐层填满 → 外扩 的严格增长机制

住宅 → 商业替代（滞后逻辑）

政府公共用地强制介入（学校、医院、绿地、广场）

可视化"涟漪式"城市扩张

1.4 一句话架构

政府定骨架：一条主走廊带（主干道）+ 两个顶点（Hub1=商业客运核，Hub2=工业/货运核）。先带后点、先内后外：首季沿走廊两侧"街墙"排满，再从两顶点向外放射扩张，层层解锁。统一决策器：同一套槽位，按商业/住宅/工业的分数投标，中标落位（受配额与分区约束）。

2. 系统架构
2.1 整体架构
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   配置系统      │    │   逻辑系统      │    │   可视化系统    │
│  - 城市配置     │    │  - 地价场系统   │    │  - 渲染引擎     │
│  - 建筑配置     │    │  - 智能体系统   │    │  - 动画系统     │
│  - 智能体配置   │    │  - 轨迹系统     │    │  - 热力图显示   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │   数据系统      │
                    │  - 状态管理     │
                    │  - 输出系统     │
                    │  - 统计系统     │
                    └─────────────────┘

2.2 模块划分

配置模块 (configs/)：系统参数配置

逻辑模块 (logic/)：地价场、智能体、轨迹

可视化模块 (viz/)：渲染、热力图、动画

数据模块：状态管理与输出

2.3 政府骨架系统

2.3.1 走廊带（条带）

几何：主干道中心线 Γ；政府发布参数：

setback_m（道路退线）、sigma_perp（法向影响宽度）。

Road-L0 首发布置层：在 Γ 两侧偏移线 L± 等弧长采样为槽位（商业 25–35m、住宅 30–45m、工业 35–55m），冻结为 layer=road_L0。

2.3.2 双顶点（两放射源）

Hub1（商业/客运）：坐标 Hc，半轴参数 sigma_perp_c / sigma_para_c（各向异性，沿走廊方向更长）。

Hub2（工业/货运）：坐标 Hi，参数 sigma_perp_i / sigma_para_i。

政府给出分区掩模（zoning）：Hub1 半径内优先商业、Hub2 周边优先工业；中段走廊为住宅优先带。

2.3.3 配额与纪律

季度配额：quota_res / quota_com / quota_ind（可由居民需求与政策目标共同决定）。

逐层纪律：当季只在最内侧 active 层落位；density==100% 才解锁下一层（严格"涟漪"）。

3. 数据模型
3.1 城市状态 (City State)
{
  "simulation_info": {
    "current_month": 0,
    "total_residents": 100,
    "total_buildings": 5,
    "average_land_price": 100.0
  },
  "land_price_field": [[...]],      
  "buildings": {
    "public": [...],
    "residential": [...],
    "commercial": [...]
  },
  "residents": [...],
  "trajectory_system": {
    "commute_heatmap": [[...]],
    "commercial_heatmap": [[...]],
    "decay_rate": 0.8
  },
  "land_price_stats": {
    "min_price": 50.0,
    "max_price": 300.0,
    "avg_price": 100.0,
    "price_distribution": {...}
  },
  "hysteresis_flags": {...},
  "public_facilities": [...],
  "layers": [
    {
      "layer_id": "commercial_P0",
      "status": "active",   
      "activated_quarter": 1,
      "slots": [
        { "pos": [120, 80], "used": false, "dead": false, "allowed_types": ["com"] }
      ],
      "capacity": 25,
      "dead_slots": 1,
      "capacity_effective": 24,
      "placed": 20,
      "density": 0.83
    }
  ]
}

3.2 轨迹系统
{
  "trajectory_types": {
    "commute": { "color": "#0066CC", "intensity": 1.0 },
    "commercial": { "color": "#CC3300", "intensity": 0.7 }
  },
  "heatmap_layers": {
    "commute": [[...]],
    "commercial": [[...]],
    "combined": [[...]]
  }
}

4. 功能模块
4.1 时间系统

地价场更新：年度/半年级别，σ 渐进增长

建筑更新：季度批量新增（住宅 10–20，商业 5–12，公共 1–3）

人口/热力更新：每月

更新逻辑：

每月：居民轨迹 → 热力更新 → 地价场小修正

每季度：基于等值线分带 → 批量生成建筑

每年：地价场范围外扩，σ 平滑增长

4.1.1 特征与评分系统

给每个槽位计算以下特征（features），统一喂给评分器：

f_road：到走廊线 Γ 的法向核（线状高斯）：exp(-d⊥²/2σ⊥²)

f_hub_com：商业顶点核（各向异性高斯，沿线更长）

f_hub_ind：工业顶点核（各向异性高斯，或"避开商业"的差分核）

f_access：公共设施可达（政府投放后实时改变）

f_heat：居民轨迹热力（商业消费/通勤）

crowding/junction_penalty：拥挤与路口惩罚

统一打分函数（同形不同权）：

商业：score_com = 0.6*f_hub_com + 0.2*f_road + 0.15*f_heat + 0.05*f_access - penalties

工业：score_ind = 0.55*f_hub_ind + 0.25*f_road + 0.05*f_access - 0.10*crowding - 0.05*junction

住宅：score_res = 0.5*f_road + 0.15*f_access - 0.2*f_hub_com - 0.15*f_hub_ind - penalties

多"场"只是特征层；决策永远一套：分区过滤 → 计算三分 → 赢家通吃（受配额）

4.2 轨迹系统

居民日程：住宅→工作→购物→住宅

热力更新：每次移动累积，月度衰减 20%

输出层：通勤热力、商业热力、综合热力

4.3 智能体系统

政府：每季度决策公共设施

企业：按季度新增建筑，基于等值线选址

居民：选住宅/工作 → 按日程活动，更新热力

4.4 高斯核地价潜力场系统

点核 (交通枢纽)：2D 高斯函数

线核 (道路)：基于垂直距离的高斯衰减

融合方式：max(P_hub, P_road)，阈值以下设为 0

时间演化：σ_hub / σ_road 随时间增长，平滑过渡

单位一致性：meters_per_pixel 参数

4.5 建筑增长系统（逐层严格生长）

冻结施工线：等值线一旦激活 → polyline 和 slots 固定。

逐层严格填满机制：

当前层所有 有效槽位 (capacity_effective) 被占满 → 才能激活外层。

本季度剩余的配额 不跨层，直接结转。

死槽机制：

被边界/公共用地遮挡的槽位标记为 dead，不计入有效容量。

死槽率不得超过配置阈值。

4.6 分带与等值线建筑生成

分带规则：

前排 (60–120m)：仅商业

住宅带 (120–260m)：住宅为主

外围 (>260m)：混合

等值线提取：marching squares

槽位化（slotting）：等弧长采样 → 每个点生成一个槽位

等弧长采样：商业 25–35m，住宅 35–55m

逐层激活流程：

初始季度激活 P0 层并冻结槽位

每季度配额全部先投放当前层

层满格后，下季度才激活外层

4.7 住宅 → 商业替代

条件：连续 2 季度商业评分 > 住宅评分+0.15

冷却期：4 季度

保底：住宅占比 ≥ 35%

4.8 公共用地机制

触发条件：人口密度 / 可达性 / 建筑密度 / 商业密度

效果：局部地价 +10–20%，迁入率上升，缓解拥挤

公共用地插入不消耗住宅/商业配额，但会屏蔽槽位

4.9 生长流程（条带→放射）

Q0–Q1：沿走廊首发（Road-L0）

激活并冻结 road_L0；

只在 road_L0 槽位投放，**满格（≥95% 有死槽容忍）**后，标记 complete；

期间政府可在交叉口/尽头插入公共用地（学校/公园），刷新 f_access。

Q2+：双顶点放射 + 走廊外扩

同时激活两组放射层：

商业放射 P0_c：取 f_hub_com 的高值等值线（如 0.85→0.78→0.71…），由内向外解锁。

工业放射 P0_i：取 f_hub_ind 的等值线（可设计成"外侧更优"的序列 0.6→0.7→0.8…），向外扩。

住宅层：在走廊中段的目标区间（如 f_road∈[0.45,0.65] 且远离两 hub 高值区）逐层填充。

当季仅在"当前最内侧 active 层"中标放置；层满→下季激活下一圈。

形成视觉：先是一条"街墙"条带→ 两端各自放射状外扩→ 中段平行带向外涨。

4.10 决策器（统一中标）

def place_on_active_layer(active_layer, quotas):
    buckets = {"com":[], "res":[], "ind":[]}
    for slot in active_layer.free_slots():
        feats = compute_features(slot)  # f_road, f_hub_com, f_hub_ind, f_access, f_heat, penalties...
        scores = {
          "com": dot(W_com, feats) if slot.allow("com") else -inf,
          "res": dot(W_res, feats) if slot.allow("res") else -inf,
          "ind": dot(W_ind, feats) if slot.allow("ind") else -inf
        }
        winner = argmax(scores)
        buckets[winner].append((slot, scores[winner]))

    placed = []
    for k in ["com","res","ind"]:
        take = topN(buckets[k], quotas[k])  # 降序取前N
        placed += place_with_collision_check(take)

    if active_layer.density_effective()==1.0:
        active_layer.complete()
        schedule_activate_next_layer()  # 下季生效
    return placed

5. 可视化系统

渲染顺序：网格 → 热力图 → 道路/枢纽 → 等值线 → 槽位 → 建筑 → 居民 → 统计

公共用地符号：🏫 🏥 🌳 🏛️

槽位显示：

Free = 空心圆

Used = 实心圆

Dead = 灰色叉号

层状态显示：

Active 层 = 高亮粗线

Complete 层 = 绿色勾标识

面板：显示每层的填充进度 placed / capacity_effective

生长动画：新建筑从点状槽位在 0.6s 内长成 footprint

6. 输出系统

6.1 增量式建筑位置导出（v3.1新增）

采用纯增量方案优化存储空间：

第1个月：完整状态文件
- building_positions_month_01.json（完整建筑列表）

第2-N个月：增量文件
- building_delta_month_*.json（仅新增建筑）

增量文件格式：
```json
{
  "month": 5,
  "timestamp": "month_05", 
  "new_buildings": [
    {
      "id": "res_001",
      "type": "residential",
      "position": [123.456, 789.012],
      "land_price_value": 0.8,
      "slot_id": "slot_001"
    }
  ],
  "metadata": {
    "total_buildings": 150,
    "new_count": 3
  }
}
```

6.2 其他输出文件

city_state_output.json

trajectory_data.json

land_price_evolution.json

land_price_field_quarterly.json

facility_events.json

conversion_events.json

layer_state_quarterly.json（记录层状态和槽位使用）

simplified_buildings_*.json（简化格式，用于API）

渲染：month_*.png、city_evolution.gif

6.3 状态重建功能

提供重建任意月份完整状态的工具函数：
- get_full_state_at_month(target_month)
- 从第1个月开始累加所有增量文件
- 支持缓存机制提升查询效率

7. 配置系统
"city": {
  "map_size": [110, 110],
  "trunk_road": [[20, 55], [90, 55]],
  "transport_hubs": [[20, 55], [90, 55]]
},
"government_backbone": {
  "road_corridor": { "sigma_perp_m": 40, "setback_m": { "com": 8, "res": 10, "ind": 14 } },
  "hubs": {
    "commercial": { "sigma_perp_m": 30, "sigma_parallel_m": 90 },
    "industrial": { "sigma_perp_m": 35, "sigma_parallel_m": 110 }
  },
  "zoning": {
    "hub_com_radius_m": 350, "hub_ind_radius_m": 450,
    "mid_corridor_residential": true
  },
  "quotas_per_quarter": { "res": [10,20], "com": [5,12], "ind": [4,10] },
  "strict_layering": true, "dead_slots_ratio_max": 0.05
},
"scoring_weights": {
  "com": { "f_hub_com": 0.6, "f_road": 0.2, "f_heat": 0.15, "f_access": 0.05,
           "crowding": 0.03, "junction_penalty": 0.02 },
  "ind": { "f_hub_ind": 0.55, "f_road": 0.25, "f_access": 0.05,
           "crowding": 0.10, "junction_penalty": 0.05 },
  "res": { "f_road": 0.5, "f_access": 0.15,
           "f_hub_com": -0.2, "f_hub_ind": -0.15, "crowding": 0.05 }
},
"gaussian_land_price_system": {
  "meters_per_pixel": 2.0,
  "hub_sigma_base_m": 40,
  "road_sigma_base_m": 20,
  "hub_peak_value": 1.0,
  "road_peak_value": 0.7,
  "min_threshold": 0.1,
  "hub_growth_rate": 0.03,
  "road_growth_rate": 0.02,
  "max_hub_multiplier": 2.0,
  "max_road_multiplier": 2.5,
  "alpha_inertia": 0.25
},
"isocontour_layout": {
  "commercial": { "start_P": 0.85, "depth_m": 20, "gap_m": 10, "arc_spacing_m": [25, 35] },
  "residential": { "start_P": 0.55, "depth_m": 14, "gap_m": 26, "arc_spacing_m": [35, 55] },
  "normal_offset_m": 1.0,
  "jitter_m": 0.5,
  "fallback_percentiles": { "commercial": [95, 90, 85], "residential": [80, 70, 60, 50] }
},
"bands": {
  "front_no_residential_m": [60, 120],
  "residential_side_band_m": [120, 260],
  "use_signed_normal": true
},
"landuse_hysteresis": {
  "delta_bid": 0.15,
  "L_quarters": 2,
  "cooldown_quarters": 4,
  "res_min_share": 0.35
},
"public_facility_rules": {
  "school": { "trigger_population": 500, "service_radius": 500, "symbol": "🏫" },
  "hospital": { "trigger_distance_threshold": 800, "service_radius": 800, "symbol": "🏥" },
  "park": { "trigger_building_density": 0.6, "service_radius": 300, "symbol": "🌳" },
  "plaza": { "trigger_commercial_density": 0.5, "service_radius": 400, "symbol": "🏛️" }
},
"progressive_growth": {
  "enabled": true,
  "strict_fill_required": true,       
  "allow_dead_slots_ratio": 0.05,     
  "carry_over_quota": true,           
  "freeze_contour_on_activation": true,
  "min_segment_length_factor": 3.0    
}

8. 验收标准
主标准

建筑严格落在等值线上（误差 ≤0.5m）

商业等值线平均间距 = 30m ±10%；住宅 = 40m ±10%

等弧长采样符合配置区间占比 ≥90%

分带正确：前排无住宅，住宅集中在带区

地价场年度过渡平滑（σ 连续增长）

建筑分布与地价场相关性 ≥0.7

8.1 政府骨架验收口径

条带先成型：road_L0 两侧"街墙"完整度 ≥95%，角点净空合规；

双顶点放射：Hub1/Hub2 周边"内圈优先"或"外圈优先"（按配置）逐层解锁，无跨层放置；

中段住宅带：走廊中段的住宅覆盖率≥目标阈值（如 60%），靠近两端渐变为商/工；

时间秩序：complete_at(road_L0) ≤ activated_at(P0_c/P0_i)；

可解释性：中标日志记录槽位特征与三类分数，胜者差距分布合理。

逐层严格性

任意季度，若存在外层 active/used，则所有内层必须 complete

层的 density = placed / capacity_effective 必须 =100% 才能激活外层

本季度剩余配额不可跨层

死槽容忍度

每层 dead_slots / capacity ≤ allow_dead_slots_ratio

可视化一致性

面板显示每层进度条与 dead 槽位数

扩张呈现“涟漪式”效果：由内而外逐层亮起

9. 开发计划

阶段1：时间系统改造（1–2 天）

阶段2：轨迹系统开发（2–3 天）

阶段2.5：高斯核地价场系统实现（1–2 天）

阶段3：增长系统优化（1–2 天）

阶段3.5：等值线建筑生成与替代逻辑（2–3 天）

✅ 槽位化与冻结施工线

✅ 层状态机（locked/active/complete）

✅ 严格满格后外扩逻辑

✅ 死槽机制与统计

阶段4：可视化增强（1–2 天）

阶段4.5：公共用地机制实现（1 天）

阶段5：测试与优化（1 天）

10. 风险评估

等值线抖动：σ 增长过快 → 使用 α=0.25 平滑 + 冻结施工线

层卡住：若死槽过多导致无法满格 → 使用 allow_dead_slots_ratio 容忍度

外层过晚激活：通过 max_quarters_per_layer 控制

公共用地过密：加最小间距约束

热力数据膨胀：numpy 优化 + 历史清理

建筑重叠风险：加入占位/碰撞检测

11. 版本历史

v3.2（当前）

引入政府骨架系统：走廊带 + 双顶点架构

统一决策器：商业/住宅/工业统一评分投标机制

特征化评分系统：f_road, f_hub_com, f_hub_ind, f_access, f_heat 等多特征融合

条带→放射生长流程：先沿走廊"街墙"排满，再双顶点向外放射

分区约束与配额管理：政府定骨架，智能体按规则投标

v3.1

引入 槽位化 + 冻结等值线

严格逐层满格机制

新增 dead 槽位机制与容忍率

可视化强化：槽位三态 + 层进度面板

网格尺寸优化：256×256 → 110×110（提升性能，保持比例）

交通枢纽位置调整：适配新网格尺寸

v3.0

全面替换 SDF → Gaussian Land Price Field

更新输出/配置字段名

验收标准、风险、可视化统一为地价场术语

v2.3

高斯核系统初步实现，仍含 SDF 残留

新增时间分层、住宅/商业分带、住改商滞后逻辑

v2.2

Logistic 建筑增长曲线

分批闪现机制

核心点修复

防重复机制

v2.0

月级时间系统

真实通勤轨迹

热力图系统

v1.0

基础多智能体系统

日级时间系统

基础可视化