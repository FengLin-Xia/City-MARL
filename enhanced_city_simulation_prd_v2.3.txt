增强城市模拟系统 PRD v2.3
Product Requirements Document
1. 项目概述
1.1 项目名称

增强城市模拟系统 (Enhanced City Simulation System)

1.2 项目目标

构建一个基于多智能体的城市发展模拟系统，通过 SDF 地价潜力场、智能体决策、真实通勤轨迹和多时间尺度更新，模拟城市的动态演化。

1.3 核心特性

多智能体决策系统（政府、企业、居民）

SDF 驱动的地价演化与建筑分布

真实通勤轨迹和热力图

时间分层：慢（SDF）、中（人口）、快（建筑）

住宅 → 商业替代（滞后逻辑）

政府公共用地强制介入（学校、医院、绿地、广场）

可视化城市演化过程

2. 系统架构
2.1 整体架构
┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐
│   配置系统      │    │   逻辑系统      │    │   可视化系统    │
│  - 城市配置     │    │  - SDF地价系统  │    │  - 渲染引擎     │
│  - 建筑配置     │    │  - 智能体系统   │    │  - 动画系统     │
│  - 智能体配置   │    │  - 轨迹系统     │    │  - 热力图显示   │
└─────────────────┘    └─────────────────┘    └─────────────────┘
         │                       │                       │
         └───────────────────────┼───────────────────────┘
                                 │
                    ┌─────────────────┐
                    │   数据系统      │
                    │  - 状态管理     │
                    │  - 输出系统     │
                    │  - 统计系统     │
                    └─────────────────┘

2.2 模块划分

配置模块 (configs/): 系统参数配置

逻辑模块 (logic/): SDF、地价、智能体、轨迹

可视化模块 (viz/): 渲染、热力图、动画

数据模块: 状态管理与输出

3. 数据模型
3.1 城市状态 (City State)
{
  "simulation_info": {
    "current_month": 0,
    "total_residents": 100,
    "total_buildings": 5,
    "average_land_price": 100.0
  },
  "sdf_field": [[...]],       // SDF 地价潜力矩阵
  "buildings": {
    "public": [...],
    "residential": [...],
    "commercial": [...]
  },
  "residents": [...],
  "trajectory_system": {
    "commute_heatmap": [[...]],
    "commercial_heatmap": [[...]],
    "decay_rate": 0.8
  },
  "land_price_stats": {
    "min_price": 50.0,
    "max_price": 300.0,
    "avg_price": 100.0,
    "price_distribution": {...}
  },
  "hysteresis_flags": {...},   // 建筑替代标记
  "public_facilities": [...]   // 公共设施清单
}

3.2 轨迹系统 (Trajectory System)
{
  "trajectory_types": {
    "commute": {
      "color": "#0066CC",
      "intensity": 1.0,
      "description": "住宅到工作地点的通勤轨迹"
    },
    "commercial": {
      "color": "#CC3300",
      "intensity": 0.7,
      "description": "购物和娱乐活动轨迹"
    }
  },
  "heatmap_layers": {
    "commute": [[...]],
    "commercial": [[...]],
    "combined": [[...]]
  }
}

4. 功能模块
4.1 时间系统 (Time System)

SDF 更新：每年，半年–1年过渡（点 → 线）

建筑更新：每季度批量新增（住宅 10–20，商业 5–12，公共 1–3）

人口/热力更新：每月

更新逻辑：

每月：居民轨迹 → 热力更新 → SDF 小修正

每季度：根据 SDF 等值线分带 → 批量落建筑

每年：SDF 形态演化（点 → 线）、外扩

4.2 轨迹系统 (Trajectory System)

居民日程：住宅→工作→购物→住宅

热力更新：每次移动累积，月度衰减 20%

轨迹类型：通勤轨迹、商业轨迹、综合热力

4.3 智能体系统

政府智能体

每季度决策

补充公共用地：学校/医院/公园/广场

触发条件：人口密度/覆盖率/商业密度阈值

企业智能体

按季度新增建筑

使用 SDF 等值线选址

商业优先高值带，住宅优先中值带

居民智能体

选住宅：地价 + 可达性 + 公共设施

选工作：薪资 + 通勤距离

行为：按日程移动，产生热力

4.4 高斯核地价场系统

本质：连续的城市地价潜力场，基于高斯核函数实现平滑分布

4.4.1 系统设计理念

替代原有SDF系统的数值割裂问题，实现：
- 连续地价分布：无数值突变或硬截断
- 平滑等高线：形成完整的等值线分布
- 自然演化：σ参数随时间渐进增长
- 物理一致性：基于真实距离的高斯衰减

4.4.2 核心组件定义

交通枢纽点集 S：{s₁, s₂, ..., sₙ}，使用点状高斯核
主干道 Γ：连接枢纽的直线段，使用线状高斯核
坐标系统：(x, y) 为像素坐标，支持 meters_per_pixel 单位转换

4.4.3 高斯核函数定义

点状高斯核（Hub影响）：
P_S(x, y) = max_{s∈S} V_hub · exp(-((x-x_s)² + (y-y_s)²) / (2σ_hub²))

其中：
- V_hub：Hub峰值地价（默认1.0）
- σ_hub：Hub高斯核标准差，控制影响范围
- (x_s, y_s)：枢纽s的坐标

线状高斯核（道路影响）：
P_Γ(x, y) = V_road · exp(-d⊥²(x, y) / (2σ_road²)) · I_road(x, y)

其中：
- V_road：道路峰值地价（默认0.7）
- σ_road：道路高斯核标准差，控制影响范围
- d⊥(x, y)：点到道路的垂直距离
- I_road(x, y)：道路指示函数（在道路范围内为1，否则为0）

4.4.4 地价场融合

组合地价场：
P_combined(x, y) = max(P_S(x, y), P_Γ(x, y))

应用阈值过滤：
P_final(x, y) = P_combined(x, y) if P_combined(x, y) ≥ threshold else 0

其中 threshold 为最小地价阈值（默认0.1）

4.4.5 时间演化机制

渐进式σ增长：
σ_hub(t) = σ_hub_base · (1 + (max_multiplier - 1) · (1 - exp(-growth_rate · t)))
σ_road(t) = σ_road_base · (1 + (max_multiplier - 1) · (1 - exp(-growth_rate · t)))

其中：
- σ_hub_base：Hub基础σ值（默认20px，对应40m）
- σ_road_base：道路基础σ值（默认10px，对应20m）
- growth_rate：增长率（Hub: 3%/月，道路: 2%/月）
- max_multiplier：最大增长倍数（Hub: 2.0，道路: 2.5）

4.4.6 演化阶段划分

初始阶段（0-6月）：Hub影响范围小，道路影响最小
早期增长（6-12月）：Hub影响范围扩大，道路影响开始显现
中期增长（12-18月）：Hub和道路影响范围继续扩大
成熟阶段（18+月）：Hub和道路影响范围都达到较高水平

4.4.7 单位系统

引入 meters_per_pixel 参数，确保物理单位一致性：
- σ_hub_m → σ_hub_px = σ_hub_m / meters_per_pixel
- σ_road_m → σ_road_px = σ_road_m / meters_per_pixel
- 所有距离计算基于像素坐标，但参数配置使用物理单位

4.4.8 系统优势

相比原有SDF系统：
- ✅ 数值连续：无边界突变，形成完整等高线
- ✅ 自然衰减：高斯函数提供平滑的空间分布
- ✅ 渐进演化：σ参数平滑增长，避免跳跃式变化
- ✅ 物理合理：基于真实距离的衰减更符合地价逻辑
- ✅ 计算高效：向量化操作，支持大规模地图

4.5 增长系统

Logistic 函数控制建筑总量：前期慢、中期快、后期收敛

每季度分批次渲染（每季度 2–3 批，每批间隔 1–2 秒）

4.6 分带与等值线建筑生成

4.6.1 分带规则（基于主干道法向距离）

前排区域：d⊥ ∈ [60m, 120m]，禁止住宅建筑，仅允许商业建筑
住宅带：d⊥ ∈ [120m, 260m]，主要放置住宅建筑，允许商业建筑
外围区域：d⊥ > 260m，允许所有建筑类型

分带判定方法：
1. 计算点到主干道的法向距离 d⊥(x,Γ)
2. 确定点的左右位置（相对于主干道方向）
3. 根据 d⊥ 值判定所属分带

4.6.2 等值线生成（几何等距主导）

商业建筑等值线：
- 起始值：P₀ = 0.85
- 间距：Δd = 30m（建筑进深20m + 间隔10m）
- 等值序列：P_k = P₀ · exp(-k·Δd/λ⊥)

住宅建筑等值线：
- 起始值：P₀ = 0.55
- 间距：Δd = 40m（建筑进深14m + 间隔26m）
- 等值序列：P_k = P₀ · exp(-k·Δd/λ⊥)

等值线提取方法：
1. 使用 marching squares 算法提取 P = P_k 的等值曲线
2. 保留连续且长度足够的等值线
3. 对破碎或过短的等值线使用分位数回退

4.6.3 建筑放置逻辑

等弧长采样：
- 沿单条等值线按等弧长采样建筑位置
- 商业建筑：弧长间距 25-35m
- 住宅建筑：弧长间距 35-55m

位置调整：
- 法向偏移：垂直于等值线方向偏移 ±1m（修复：从±4m减少到±1m）
- 切向抖动：沿等值线方向抖动 ±0.5m（修复：从±1.5m减少到±0.5m）

4.6.4 分位数回退机制

触发条件：
- 等值线破碎或长度不足
- SDF分布异常导致等值线提取失败
- 等值线间距不符合几何要求

回退方案：
- 商业建筑：使用 [95, 90, 85] 分位数
- 住宅建筑：使用 [80, 70, 60, 50] 分位数
- 记录回退事件用于后续分析

4.6.5 逐层填满的建筑生成逻辑

4.6.5.1 核心原则

建筑生成应体现城市的"生长感"，遵循从核心向外扩展的自然规律：
- 优先填满最内圈等值线（贴近道路和枢纽）
- 当前层等值线填满后，再激活下一层等值线
- 形成视觉上的"涟漪式"城市扩张效果

4.6.5.2 分层激活机制

商业建筑分层：
- 第1季度：激活 P₀(0.85) 等值线
- 第2季度：检查P₀密度，≥80%则激活P₁(0.78)
- 第3季度：检查P₀+P₁密度，≥80%则激活P₂(0.71)
- 以此类推...

住宅建筑分层：
- 第1季度：激活 P₀(0.55) 等值线
- 第2季度：检查P₀密度，≥80%则激活P₁(0.40)
- 第3季度：检查P₀+P₁密度，≥80%则激活P₂(0.29)
- 以此类推...

4.6.5.3 层密度检查

单层密度计算：
```
layer_density = 已放置建筑数 / 理论最大建筑数
理论最大建筑数 = 等值线弧长 / 最小建筑间距
```

激活条件：
- 当前层密度 ≥ 80% → 激活下一层
- 当前层密度 < 30% → 延迟激活下一层
- 当前层密度 ∈ [30%, 80%] → 继续填满当前层

4.6.5.4 建筑放置优先级

每季度建筑生成顺序：
1. 优先在当前激活层放置建筑
2. 当前层空间不足时，检查是否满足下一层激活条件
3. 满足条件则激活下一层，否则等待下季度

4.6.5.5 可视化生长效果

生长状态显示：
- 当前激活层数标识
- 各层填充进度条
- 建筑放置时的"生长动画"
- 不同颜色区分不同时期的等值线

4.6.5.6 配置参数

新增配置字段：
```json
"progressive_growth": {
  "enabled": true,
  "layer_activation_threshold": 0.8,
  "layer_delay_threshold": 0.3,
  "max_quarters_per_layer": 4,
  "growth_animation": true
}
```

4.7 住宅 → 商业替代（Hysteresis）

连续 2 季度满足 Score_com > Score_res+0.15

冷却期 4 季度

保底：住宅占比 ≥ 35%

4.8 公共用地机制

触发条件：

人口密度 > 阈值 → 学校

平均可达性差 → 医院

建筑密度 > 阈值/热力过高 → 公园

商业密度 > 阈值 → 广场

效应：

半径范围内地价 +10–20%

提升迁入率，缓解过密

5. 可视化系统

渲染顺序：网格 → 热力图 → 主干道 → 枢纽 → 建筑 → 居民 → 统计

热力图：通勤蓝、商业红、综合紫

公共用地符号：🏫 🏥 🌳 🏛️

新增：显示等值线（淡色）

6. 输出系统

city_state_output.json

trajectory_data.json

land_price_evolution.json

sdf_field.json（季度 SDF 矩阵）

facility_events.json（公共用地触发）

conversion_events.json（住宅→商业替代）

building_positions_month_*.json（建筑位置和颜色信息）

渲染帧：month_*.png、city_evolution.gif

7. 配置系统

新增字段（示例）：

"gaussian_land_price_system": {
  "meters_per_pixel": 2.0,
  "hub_sigma_base_m": 40,
  "road_sigma_base_m": 20,
  "hub_peak_value": 1.0,
  "road_peak_value": 0.7,
  "min_threshold": 0.1,
  "hub_growth_rate": 0.03,
  "road_growth_rate": 0.02,
  "max_hub_multiplier": 2.0,
  "max_road_multiplier": 2.5,
  "alpha_inertia": 0.25
},
"isocontour_layout": {
  "commercial": {
    "start_P": 0.85,
    "depth_m": 20,
    "gap_m": 10,
    "arc_spacing_m": [25, 35]
  },
  "residential": {
    "start_P": 0.55,
    "depth_m": 14,
    "gap_m": 26,
    "arc_spacing_m": [35, 55]
  },
  "normal_offset_m": 1.0,
  "jitter_m": 0.5,
  "fallback_percentiles": {
    "enabled": true,
    "commercial": [95, 90, 85],
    "residential": [80, 70, 60, 50]
  }
},
"bands": {
  "front_no_residential_m": [60, 120],
  "residential_side_band_m": [120, 260],
  "use_signed_normal": true
},
"landuse_hysteresis": {
  "delta_bid": 0.15,
  "L_quarters": 2,
  "cooldown_quarters": 4,
  "res_min_share": 0.35
},
"public_facility_rules": {
  "school": { "trigger_population": 500, "service_radius": 500, "symbol": "🏫" },
  "hospital": { "trigger_distance_threshold": 800, "service_radius": 800, "symbol": "🏥" },
  "park": { "trigger_building_density": 0.6, "service_radius": 300, "symbol": "🌳" },
  "plaza": { "trigger_commercial_density": 0.5, "service_radius": 400, "symbol": "🏛️" }
}

8. 验收标准

 月度人口更新正常

 季度建筑生成符合等值线规则

 年度 SDF 平滑过渡

 建筑分布与 SDF 相关性 ≥ 0.7

 住宅→商业替代遵守滞后逻辑

 公共用地在高密区域必然出现

 热力图、等值线渲染正确

【主验收标准】几何等距等值线建筑生成：

 建筑位置严格按等值线分布，无随机分布

 几何等距：相邻两条商业等值线的平均法向距离 = 30m ± 10%；住宅 = 40m ± 10%

 等弧长采样：沿单条等值线相邻建筑的弧长间距在配置区间内的占比 ≥ 90%

 分带正确性：前排 d⊥∈[60,120] 内住宅占比 ≈ 0；住宅主要落在 d⊥∈[120,260] 两侧带

 等值线可视化清晰，与建筑位置对应

 建筑位置JSON输出包含正确的SDF值信息（修复：使用等值线值而非位置SDF值）

 商业建筑集中在交通枢纽附近，住宅建筑分布合理

 建筑严格放置在等值线上，法向偏移和切向抖动控制在合理范围内

【逐层填满验收标准】渐进式城市生长：

 建筑生成遵循从内到外的顺序：最内圈等值线优先填满，再逐层外扩

 层密度检查机制正常：当前层密度≥80%时激活下一层，<30%时延迟激活

 每季度建筑生成集中在当前激活层，避免跨层跳跃式放置

 可视化能清晰显示当前激活层数和各层填充进度

 城市扩张呈现"涟漪式"效果，符合自然生长规律

【回退路径验收】分位数回退机制：

 回退事件率：使用分位数回退的等值线级别占全部级别的比例 ≤ 15%

 回退触发条件合理：仅在等值线破碎、长度不足或SDF分布异常时触发

 分位数设置合理：商业建筑 [95, 90, 85] 分位数，住宅建筑 [80, 70, 60, 50] 分位数

 回退事件记录完整：包含触发原因、回退级别、影响范围等信息

9. 开发计划

阶段1：时间系统改造（1–2 天）

阶段2：轨迹系统开发（2–3 天）

阶段2.5：高斯核地价场系统实现（1–2 天）

阶段3：增长系统优化（1–2 天）

阶段3.5：等值线建筑生成与替代逻辑（2–3 天）

【已完成】几何等距等值线系统重构（2–3 天）：
- ✅ 实现基于主干道法向距离的分带判定系统
- ✅ 实现 marching squares 等值线提取算法
- ✅ 实现等弧长采样建筑放置逻辑
- ✅ 实现分位数回退机制和事件记录
- ✅ 添加单位系统（meters_per_pixel）确保物理一致性
- ✅ 验证几何等距和分带正确性
- ✅ 修复建筑严格放置在等值线上的问题
- ✅ 减少法向偏移（从4m到1m）和切向抖动（从1.5m到0.5m）
- ✅ 加强位置验证，确保建筑地价值与等值线值匹配

【已完成】高斯核地价场系统重构（1–2 天）：
- ✅ 替代SDF系统：解决数值割裂问题，实现连续地价分布
- ✅ 实现点状高斯核：Hub影响使用2D高斯函数
- ✅ 实现线状高斯核：道路影响使用垂直距离高斯函数
- ✅ 实现渐进式演化：σ参数随时间平滑增长
- ✅ 实现地价场融合：Hub和道路地价的平滑叠加
- ✅ 添加单位系统：支持meters_per_pixel参数配置
- ✅ 系统优势：数值连续、自然衰减、物理合理

【新增任务】逐层填满建筑生成逻辑（1–2 天）：
- 实现分层激活机制（商业建筑P₀→P₁→P₂，住宅建筑P₀→P₁→P₂）
- 实现层密度检查算法（弧长密度计算、激活阈值判断）
- 实现建筑放置优先级控制（优先当前层，满足条件激活下一层）
- 增强可视化效果（层数标识、填充进度、生长动画）
- 添加渐进式生长配置参数

阶段4：可视化增强（1–2 天）

阶段4.5：公共用地机制实现（1 天）

阶段5：测试与优化（1 天）

10. 风险评估

SDF 演化过快 → 抖动：用 α=0.2 指数平滑

公共用地过密 → 无序增长：最小间距约束

热力数据过大 → 内存风险：numpy 优化 + 历史数据清理

【已解决】几何等距等值线系统：

✅ marching squares 算法实现复杂 → 等值线提取失败：已使用 matplotlib.contour 实现

✅ 等弧长采样计算复杂 → 建筑分布不均匀：已实现高效的弧长参数化算法

✅ 分带判定计算量大 → 性能问题：已优化点到直线距离计算

✅ 单位系统混用 → 参数错误：已严格区分物理单位和像素单位，添加单位验证

✅ 分位数回退过度使用 → 几何等距失效：已监控回退事件率，设置合理的触发阈值

【新增风险】建筑位置验证：

建筑位置验证过于严格 → 建筑生成失败：已设置合理的误差范围（5%）

法向偏移过小 → 建筑重叠：已优化偏移算法，确保建筑分布合理

11. 版本历史
v2.3 (当前版本)

明确高斯核地价场作为地价潜力场（点→线演化）

新增时间分层（年/季/月）

新增等值线选址机制（深度+间隔）

新增住宅/商业分带逻辑

新增住改商滞后替代机制

新增公共用地强制介入

【重大重构】高斯核地价场系统：
- ✅ 替代SDF系统：解决数值割裂问题，实现连续地价分布
- ✅ 高斯核函数：使用点状和线状高斯核，形成平滑等高线
- ✅ 渐进式演化：σ参数随时间平滑增长，避免跳跃式变化
- ✅ 物理一致性：基于真实距离的衰减，更符合地价逻辑
- ✅ 系统优势：数值连续、自然衰减、计算高效

【已修复】几何等距等值线系统问题：
- ✅ 等值线定义冲突：分位数与几何等距不可同时成立 → 已重构为几何等距主导
- ✅ 地价场生成：使用高斯核函数替代SDF，实现连续分布
- ✅ 单位未闭合：米↔像素混用 → 已引入 meters_per_pixel 单位系统
- ✅ 分带依据混乱：用枢纽距离而非道路法向距离 → 已重构为基于主干道法向距离
- ✅ 等值线提取方式不对：用外轮廓而非真正等值线 → 已实现 marching squares 算法

【最新修复】建筑位置与等值线对应问题：
- ✅ 建筑严格放置在等值线上：减少法向偏移和切向抖动
- ✅ 建筑地价值记录：使用等值线值而非位置地价值
- ✅ 位置验证加强：检查地价值是否接近等值线值（允许5%误差）
- ✅ 分带检查优化：基于主干道法向距离的精确分带判定

【重构成果】：
- 实现基于主干道法向距离的分带系统
- 实现几何等距的等值线生成和建筑放置
- 建立完整的单位系统和物理一致性
- 提供分位数回退机制作为备选方案
- 确保建筑严格按等值线分布，无随机分布
- 实现连续的高斯核地价场，形成完整等高线

v2.2

Logistic 建筑增长曲线

分批闪现机制

修复核心点

防重复机制

v2.0

月级时间系统

真实通勤轨迹

热力图系统

v1.0

基础多智能体系统

日级时间系统

基础可视化